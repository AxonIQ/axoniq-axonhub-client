syntax = "proto3";
import "messaging_messages.proto";
package io.axoniq.platform.grpc;

option java_multiple_files = true;

service PlatformService {
    rpc GetPlatformServer (ClientIdentification) returns (PlatformInfo) {
    }

    rpc OpenStream( stream PlatformInboundInstruction) returns (stream PlatformOutboundInstruction) {}

}

message PlatformInboundInstruction {
    oneof request {
        ClientIdentification register = 1;
        EventProcessorInfo event_processor_info = 2;
        Application application = 10;
        User user = 11;
        ContextUpdate context = 12;
        io.axoniq.axonhub.QueryUpdate query_update = 13;
        io.axoniq.axonhub.QueryUpdateComplete query_update_complete = 14;
        io.axoniq.axonhub.QueryUpdateCompleteExceptionally query_update_complete_exceptionally = 15;
    }
}

message PlatformOutboundInstruction {
    oneof request {
        NodeInfo node_notification = 1;
        RequestReconnect request_reconnect = 3;
        PauseEventProcessor pause_event_processor = 4;
        StartEventProcessor start_event_processor = 5;
        io.axoniq.axonhub.SubscriptionQueryRequest subscribe_query = 6;
        io.axoniq.axonhub.UnsubscriptionQueryRequest unsubscribe_query = 7;
    }
}

message RequestReconnect {
}

message PlatformInfo {
    NodeInfo primary = 1;
}

message NodeInfo {
    string host_name = 1;
    int32 grpc_port = 2;
    int32 http_port = 3;
    int32 version = 4;
    string node_name = 5;
}

message ClientIdentification {
    string client_name = 1;
    string component_name = 2;
}

message Application {
    string name = 1;
    string description = 2;
    string hashed_token = 3;
    repeated ApplicationRole roles = 4;
    Action action = 5;
    bool fine_grained_access_control = 6;
}

message User {
    string name = 1;
    string password = 3;
    repeated string roles = 4;
    Action action = 5;
}

message ApplicationRole {
    string name = 1;
    int64 end_date = 2;
    string context = 3;
}

enum Action {
    MERGE = 0;
    DELETE = 1;
    RENEW = 2;
}

message ContextUpdate {
    string name = 1;
    repeated string nodes = 3;
    ContextAction action = 4;
}

enum ContextAction {
    MERGE_CONTEXT = 0;
    DELETE_CONTEXT = 1;
    ADD_NODES = 2;
    DELETE_NODES = 3;
}


message EventProcessorInfo {
    message EventTrackerInfo {
        int32 segment_id = 1;
        bool caught_up = 2;
        bool replaying = 3;
        int32 one_part_of = 4;
    }

    string processor_name = 1;
    string mode = 2;
    int32 activeThreads = 3;
    bool running = 4;
    bool error = 5;
    repeated EventTrackerInfo event_trackers_info = 6;
}

message PauseEventProcessor {
    string processor_name = 1;
}

message StartEventProcessor {
    string processor_name = 1;
}

