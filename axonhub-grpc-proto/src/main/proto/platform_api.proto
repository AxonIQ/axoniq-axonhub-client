syntax = "proto3";
package io.axoniq.platform.grpc;

option java_multiple_files = true;

service PlatformService {
    rpc GetPlatformServer (ClientIdentification) returns (PlatformInfo) {
    }

    rpc OpenStream( stream PlatformInboundInstruction) returns (stream PlatformOutboundInstruction) {}

}

message PlatformInboundInstruction {
    oneof request {
        ClientIdentification register = 1;
        EventProcessorInfo processor_notification = 2;
        EventProcessorPaused event_processor_paused = 3;
        EventProcessorStarted event_processor_started = 4;
    }
}

message PlatformOutboundInstruction {
    oneof request {
        NodeInfo node_notification = 1;
        RequestReconnect request_reconnect = 3;
        RequestReleaseTracker request_release_tracker = 4;
        PauseEventProcessor pause_event_processor = 5;
        StartEventProcessor star_event_processor = 6;
    }
}

message RequestReconnect {
}

message RequestReleaseTracker {
}

message PlatformInfo {
    NodeInfo primary = 1;
}

message NodeInfo {
    string host_name = 1;
    int32 grpc_port = 2;
    int32 http_port = 3;
    int32 version = 4;
    string node_name = 5;
}

message ClientIdentification {
    string client_name = 1;
    string component_name = 2;
}

message EventProcessorInfo {
    string processor_name = 1;
    string mode = 2;
}

message PauseEventProcessor {
    string processor_name = 1;
}

message StartEventProcessor {
    string processor_name = 1;
}

message EventProcessorStarted {
    string processor_name = 1;
}

message EventProcessorPaused {
    string processor_name = 1;
}
